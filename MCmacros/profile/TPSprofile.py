eTPS = [70, 75, 80, 85, 90, 95, 100, 105, 110, 115, 120, 125, 130, 135, 140, 145, 150, 155, 160, 165, 170, 175, 180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 244]
fwhm1 = [12.247, 11.706, 11.293, 11.019, 10.807, 10.641, 10.548, 10.364, 10.162, 9.98, 9.813, 9.645, 9.547, 9.312, 9.249, 9.114, 9.066, 9.037, 9.107, 9.241, 9.254, 9.23, 9.2, 9.001, 8.922, 8.799, 8.77, 8.73, 8.714, 8.795, 8.89, 8.978, 8.931, 8.838, 8.754, 8.66]
fwhm2 = [13.246, 12.613, 12.126, 11.796, 11.485, 11.291, 11.14, 10.923, 10.74, 10.507, 10.311, 10.132, 9.941, 9.753, 9.703, 9.509, 9.381, 9.349, 9.392, 9.478, 9.482, 9.434, 9.33, 9.222, 9.082, 8.973, 8.919, 8.881, 8.89, 8.9, 9.015, 9.009, 9.024, 8.941, 8.825, 8.786]
fwhm3 = [14.394, 13.691, 13.174, 12.708, 12.337, 12.048, 11.824, 11.575, 11.312, 11.058, 10.786, 10.594, 10.404, 10.218, 10.133, 9.938, 9.8, 9.714, 9.718, 9.735, 9.74, 9.681, 9.609, 9.461, 9.3, 9.176, 9.135, 9.085, 9.089, 9.096, 9.16, 9.172, 9.155, 9.085, 8.945, 8.871]
fwhm4 = [15.697, 14.882, 14.252, 13.786, 13.292, 12.971, 12.613, 12.324, 12.06, 11.761, 11.485, 11.271, 10.994, 10.853, 10.752, 10.495, 10.32, 10.222, 10.201, 10.142, 10.121, 10.002, 9.877, 9.804, 9.6, 9.495, 9.415, 9.369, 9.363, 9.338, 9.383, 9.415, 9.369, 9.281, 9.136, 9.072]
fwhm5 = [16.908, 16.094, 15.299, 14.728, 14.241, 13.808, 13.404, 13.054, 12.747, 12.41, 12.108, 11.83, 11.573, 11.404, 11.22, 11.03, 10.788, 10.682, 10.59, 10.531, 10.477, 10.387, 10.223, 10.094, 9.945, 9.788, 9.715, 9.654, 9.615, 9.576, 9.609, 9.562, 9.566, 9.476, 9.313, 9.238]

profiles = [[fwhm1[_], fwhm2[_], fwhm3[_], fwhm4[_], fwhm5[_]] for _ in range(len(eTPS))]

# print(profiles)

###  presuming the nozzle fully retracted at -50 cm
  #  is 42 cm fully retracted, plus 8 cm from nozzle "base" to exit window
positions = [309, 400, 500, 600, 689]


from sys import path as sysPath
from os import path as osPath
sysPath.append(osPath.join(osPath.expanduser('~'),'Documents','coding','packages'))
from dataMod import fitLine

import matplotlib.pyplot as plt

for _,e in enumerate(eTPS):
    # (fit, func2) = fitLine(positions, profiles[_], order=2)
    # print(fit)
    (fit2, func2) = fitLine(positions, profiles[_], order=2)
    (fit3, func3) = fitLine(positions, profiles[_], order=3)
    print([fit2, func2, fit3, func3])

    # plt.scatter(positions, profiles[_])
    # plt.plot(positions, func2(positions))
    # plt.plot(positions, func3(positions))
    # plt.show()


###  TPS profiles solution is (3rd order):

TPSfit = [ [9.44871693e+00,  7.81033043e-03,  3.80079425e-06,  8.46099526e-10], [8.57858716e+00,  1.12283316e-02, -6.12925932e-06,  8.21855210e-09], [9.21508595e+00,  4.33925382e-03,  8.64929540e-06, -3.10232535e-09], [9.65905722e+00,  5.57086365e-04,  1.46070095e-05, -6.86229588e-09], [9.12798546e+00,  3.91929549e-03,  4.74746637e-06,  4.84657620e-10], [9.28041392e+00,  2.21098174e-03,  7.78763449e-06, -2.10495526e-09], [8.48909366e+00,  7.58902369e-03, -4.87722702e-06,  6.12224687e-09], [8.64518896e+00,  5.55640628e-03, -9.37926324e-07,  3.13971340e-09], [7.93144700e+00,  9.16049307e-03, -8.72966374e-06,  8.11512144e-09], [8.19268979e+00,  6.61984370e-03, -4.23505934e-06,  5.11040700e-09], [8.08144036e+00,  6.91882753e-03, -6.31199551e-06,  6.92228230e-09], [8.27869484e+00,  4.39171502e-03, -5.78477166e-07,  2.47286184e-09], [8.48295775e+00,  3.22684519e-03, -1.72067920e-07,  2.90729689e-09], [8.27156108e+00,  2.55043803e-03,  2.53493458e-06,  5.43439324e-10], [8.28043322e+00,  1.83667341e-03,  4.89104612e-06, -1.95403448e-09], [7.80602746e+00,  4.86640914e-03, -3.44034840e-06,  4.60923995e-09], [9.03287457e+00, -3.14003213e-03,  1.23731821e-05, -5.97192382e-09], [8.60005472e+00, -9.70483660e-05,  5.25229292e-06, -1.04122165e-09], [9.11155494e+00, -2.84115737e-03,  1.07904297e-05, -5.13916612e-09], [8.65985600e+00,  1.90530770e-03, -1.02988730e-06,  3.21502376e-09], [8.81133928e+00,  9.00250318e-04,  1.38968533e-06,  1.18964736e-09], [8.19236527e+00,  5.22818473e-03, -8.56111320e-06,  8.12224225e-09], [9.25057104e+00, -1.77274895e-03,  5.60774591e-06, -1.44571991e-09], [8.66920425e+00,  5.14532671e-05,  3.67899330e-06, -1.08083034e-09], [8.43591221e+00,  1.96811471e-03, -2.57303154e-06,  4.20368643e-09], [8.62682243e+00, -3.47381058e-04,  2.96345182e-06, -9.16287046e-12], [8.59259911e+00, -1.77035650e-04,  2.27944208e-06,  4.96761324e-10], [8.60262728e+00, -5.05395641e-04,  3.00829540e-06, -8.32231293e-11], [8.34732980e+00,  7.51968174e-04,  1.30166437e-06,  4.08937580e-10], [9.23600140e+00, -4.04841304e-03,  1.00155737e-05, -4.96984066e-09], [8.56748347e+00,  1.13985889e-03, -9.72728911e-07,  2.20049672e-09], [1.10381163e+01, -1.43146020e-02,  3.05370944e-05, -1.86749403e-08], [9.12586675e+00, -2.04856145e-03,  5.18192172e-06, -1.85382656e-09], [8.80501490e+00, -7.32577452e-04,  2.92342154e-06, -6.46113686e-10], [9.11806448e+00, -3.00247955e-03,  6.85052800e-06, -3.01767442e-09], [8.15466137e+00,  2.49231993e-03, -3.86344016e-06,  3.68397886e-09] ]
